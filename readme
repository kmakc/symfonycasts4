############################################################################################################
BASICS AND FUNDAMENTALS:
############################################################################################################
============================================================================================================
Установка:
> composer create-project symfony/skeleton symfonycasts4
============================================================================================================
Список всех консольных команд:
> php bin/console
============================================================================================================
------------------------------------------------------------------------------------------------------------
Плагины для PhpStorm (# Settings > Plugins):
- Symfony Plugin
- PHP Annotations
- PHP Toolbox
------------------------------------------------------------------------------------------------------------
После установки необходимо включить плагин в PhpStorm:
# Settings > Languages & Frameworks > PHP > Symfony > Enable Plugin for this Project (change need restart)
------------------------------------------------------------------------------------------------------------
Также необходимо указать Path to composer.json:
# Settings > Languages & Frameworks > PHP > Composer
✔ Add packages as libraries
✔ Synchronize IDE Settings with composer.json
------------------------------------------------------------------------------------------------------------
============================================================================================================
Установка аннотаций:
> composer require annotations
============================================================================================================
------------------------------------------------------------------------------------------------------------
Список всех библиотек и их flex псевдонимов:
https://flex.symfony.com/
------------------------------------------------------------------------------------------------------------
Установка security-checker для проверки приложения на уязвимости:
> composer require sec-checker --dev
Проверяем:
> php bin/console security:check
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Установка Twig:
> composer require twig
------------------------------------------------------------------------------------------------------------
Установка asset
> composer require asset
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Twig:
https://twig.symfony.com/doc/2.x/
------------------------------------------------------------------------------------------------------------
Вывод:
{{ title }}, {{ 'mom' == great ? 'hi' : '' }}
Действие (if, for, и т.д.):
{% %}
Комментарий:
{# #}
Наследование шаблона:
{% extends 'base.html.twig' %}
------------------------------------------------------------------------------------------------------------
В шаблонах доступна глобальная twig переменная app
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Профайлер (debug bar):
Установка:
> composer require profiler --dev
------------------------------------------------------------------------------------------------------------
Установка Debug pack
https://github.com/symfony/debug-pack
> composer require debug --dev
------------------------------------------------------------------------------------------------------------
При необходимости тонкой настройки - распаковываем:
> composer unpack debug
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Очистка кеша:
> bin/console cache:clear
rm -rf var/cache/dev/*
> bin/console cache:warmup нужна для первой инициализации кеша при деплое, чтобы он был сразу сформирован
------------------------------------------------------------------------------------------------------------
Логи складываются в var/log
------------------------------------------------------------------------------------------------------------
============================================================================================================
Посмотреть все маршруты приложения:
> bin/console debug:router
============================================================================================================
------------------------------------------------------------------------------------------------------------
Контейнер - это объект, который содержит все сервисы приложения, и иногда значения конфигураций (параметры)
------------------------------------------------------------------------------------------------------------
Список всех уточнений типов для внедрений сервисов (включая собственные сервисы)
> bin/console debug:autowiring --all
------------------------------------------------------------------------------------------------------------
Полный список всех сервисов в контейнере
> bin/console debug:container --show-private
Посмотреть инфу о сервисе по алиасу
> bin/console debug:container monolog.logger
Поиск сервисов, содержащих в названии "log"
> bin/console debug:container --show-private log
Посмотреть список параметров в контейнере
> bin/console debug:container --parameters
------------------------------------------------------------------------------------------------------------
Все в symfony делается с помощью сервисов. symfony - это набор сервисов, конфигов и маршрутов
Бандлы дают новые сервисы.
------------------------------------------------------------------------------------------------------------
Конфигурация бандла (посмотреть пример полного yaml конфига для бандла):
> bin/console config:dump KnpMarkdownBundle
------------------------------------------------------------------------------------------------------------
Посмотреть текущий конфиг бандла:
> bin/console debug:config framework
------------------------------------------------------------------------------------------------------------
~ в yaml файлах значит null
насчет кавычек - не всегда в параметрах они нужны, но если нет уверенности, лучше ставить
============================================================================================================
------------------------------------------------------------------------------------------------------------
Конфиги:
------------------------------------------------------------------------------------------------------------
Как работает конфигурация
Смотрим в Kernel.php configureContainer
Сначала загружаются конфиги из config/packages/*.yaml
Затем, в зависимости от среды, переопределяются и подгружаются файлы из dev/prod/test директорий
В конце подгружаются конфиги сервисов.
Пример: В коммите создан framework.yaml, который переопределяет кеш сервис для dev среды

После подгружаются конфиги из директории config/routes по тому же принципу.
------------------------------------------------------------------------------------------------------------
Интересный факт: не имеет значения, как называются файлы в config/packages, главное - их содержимое.
То есть разделение на файлы нужно для читаемости и удобства переопределения конфигов в зависимости от среды
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
autowiring используется в двух местах:
- автоматическая подстановка параметров методов контроллера
- автоматическая подстановка с уточнением типа в сервисах
------------------------------------------------------------------------------------------------------------
Если сервис public, то его можно получить из контейнера в контроллере так:
$this->get('my_service');
$container->get('my_service');
В Symfony 3 все сервисы public, в Symfony 4 почти все private.
Private удобен тем что заставляет не извлекать сервисы
напрямую из контейнера, а внедрять их в виде зависимости.
Код из-за этого более читабелен и будет быстрее работать. Если надо юзать $this->get('my_service'),
то контроллер должен расширять Controller, а не AbstractController.
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Переменные среды env variables
Список всех env переменных

> bin/console about
 в .env содержится шаблон с возможной конфигурацией. для текущей машины все реальные данные содержатся в .env.local
 (если его нет - нужно создать). Иногда шаблон содержится в .env.dist. Для прояснения, где что нужно прописывать
 можно заглянуть в .gitignore. Указанный там файл будет являться актуальным для текущего окружения
 -----------------------------------------------------------------------------------------------------------
 # CUSTOM VARS
 MY_TEST_ENV_VAR=testvalue # in yaml config: test: '%env(MY_TEST_ENV_VAR)%'
 Переменные окружения - обычно строки. Но значение может быть булево. Для этого в конфигах можно сделать
 уточнение типа значения '%env(string:MY_TEST_ENV_VAR)%' (int, bool, float и т.д.)
 https://symfony.com/blog/new-in-symfony-3-4-advanced-environment-variables
 -----------------------------------------------------------------------------------------------------------
============================================================================================================
Maker Bundle (генератор кода)
> composer require maker --dev
> bin/console # смотрим новые команды для make
Генерируем новую консольную команду
> bin/console make:command

Консольная команда может включать аргументы и опции (параметры)
> bin/console aricle:stats arg1 arg2 --option1 --opt2=test
> bin/console article:stats --help # man
> bin/console article:stats arg --format=json

============================================================================================================
############################################################################################################
DOCTRINE AND THE DATABASE
############################################################################################################
============================================================================================================
Установка Doctrine
> composer require doctrine
Создание БД
> bin/console doctrine:database:create

ORM - Object relational mapper
Аннотации:
https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/annotations-reference.html

Создать или обновить сущность (обновить - ввести существующую после команды):
> bin/console make:entity

Создать и мирации на основе текущи классов сущностей
> bin/console make:migration
Накатить миграци:
> bin/console doctrine:migrations:migrate
Статус:
> bin/console doctrine:migrations:status
============================================================================================================
Свои кастомные страницы с ошибками
https://symfony.com/doc/current/controller/error_pages.html
============================================================================================================
Создать своё twig расширение:
> bin/console make:twig-extension
Отдельная библиотека с расширениями:
https://twig-extensions.readthedocs.io/en/latest/
> bin/console debug:twig
============================================================================================================
Бандл для форматирования дат:
composer require knplabs/knp-time-bundle
============================================================================================================
Иногда в некоторых местах, типа Twig extensions, event subscribers and security voters - зависимости в конструкторе
создаются не лениво, а всегда, вне зависимости, будут ли они использоваться или нет. Для этого нужно использовать
ServiceSubscriberInterface и getSubscribedServices. В конструктор передается мини-контейнер с сервисами, описанными
в getSubscribedServices. Тогда загрузка этих сервисов будет ленивой.
============================================================================================================
При обновлении сущности нет необходимости делать $em->persist, т.к. сущность уже была извлечена и доктрина о ней знает
============================================================================================================
------------------------------------------------------------------------------------------------------------
Фикстуры:
Установка:
> composer require orm-fixtures --dev
Фикстуры выполняются в алфавитном порядке (имена файлов в DataFixtures)
Поэтому если одна фикстура зависит от другой, нужно заимплементить DependentFixtureInterface
------------------------------------------------------------------------------------------------------------
Генерация:
> bin/console make:fixture
(ArticleFixtures)
 -----------------------------------------------------------------------------------------------------------
Суть: пишем код, который генерирует и инсертит модели. запускаем консольный скрипт, исполняющий все фикстуры
 -----------------------------------------------------------------------------------------------------------
Загрузка фикстур:
> bin/console doctrine:fixtures:load
------------------------------------------------------------------------------------------------------------
============================================================================================================
Продвинутые фикстуры
https://github.com/fzaninotto/Faker

> composer require fzaninotto/faker --dev
============================================================================================================
https://symfony.com/doc/master/bundles/StofDoctrineExtensionsBundle/index.html
https://github.com/Atlantic18/DoctrineExtensions/tree/v2.4.x/doc
https://symfony.com/doc/current/doctrine/event_listeners_subscribers.html
> composer require stof/doctrine-extensions-bundle
============================================================================================================
############################################################################################################
DOCTRINE RELATIONS
############################################################################################################
============================================================================================================
Если нужно посчитать кол-во комментариев на главной для каждой строки, то для подсчета будут сначала делаться
полная выборка, это работает медленно. Если нам в Twig нужен только length(count), то в entity нужно
установить fetch="EXTRA_LAZY", тогда запрос будет только на COUNT
============================================================================================================
Если уточнять сервис в DI, то будет проброшен этот сервис. Если уточнить сущность, то будет проброшена
сущность в соответствии с wildcard метода.
============================================================================================================
Бандл для пагинации
> composer require knplabs/knp-paginator-bundle
https://github.com/KnpLabs/KnpPaginatorBundle
============================================================================================================
В ManyToMany owning side (владеющая сторона) считается сущность, у которой в аннотации указано inversedBy.
Чтобы понять, как работает сохранение и добавление таких сужностей, см. add, get, remove методы
============================================================================================================
Прокси-классы сущностей - это классы которые генерит доктрина и иногда оборачивает актуальные классы сущностей.
Это делается для поддержания функционала ленивой подгрузки ralation объектов
============================================================================================================
What if we wanted to start saving the date of when an Article was given a Tag. Well, crap! We can't do that.
We could record the date that a Tag was created or the date an Article was created, but we can't record the
date when an Article was linked to a Tag. In fact, we can't save any extra data about this relationship.
Why? Because that data would need to live on this article_tag table. For example, we might want a third
column called created_at. The problem is, when you use a ManyToMany relationship, you cannot add any
more columns to the join table. It's just not possible.
This means that if, in the future, you do need to save extra data about the relationship, well, you're in trouble.
So, here's my advice: before you set up a ManyToMany relationship, you need to think hard and ask yourself a question:
Will I ever need to store additional metadata about this relationship?
If the answer is yes, if there's even one extra piece of data that you want to store, then you should not use
a ManyToMany relationship. In fact, you can't use Doctrine at all, and you need to buy a new computer.
I'm kidding. If you need to store extra data on the article_tag table, then, instead, create a new
ArticleTag entity for that table! That ArticleTag entity would have a ManyToOne relationship to Article
and a ManyToOne relationship to Tag. This would effectively give you the exact same structure in the database.
But now, thanks to the new ArticleTag entity, you're free to add whatever other fields you want.
If you generated a ManyToMany relationship by mistake and want to switch, it's not the end of the world.
You can still create the new entity class and generate a migration so that you don't lose your existing data.
But, if you can configure things in the beginning... well, even better.
============================================================================================================
############################################################################################################
SECURITY
############################################################################################################
============================================================================================================
Создаем юзера:
> composer require security
> bin/console make:user
============================================================================================================
Symfony форма логина
https://symfony.com/doc/current/security/form_login_setup.html
============================================================================================================
Создаем аутентификатор
> bin/console make:auth
============================================================================================================
в LoginFormAuthenticator методы аутентификации вызываются последовательно, сверху вниз
============================================================================================================
Установка сериализатора для API
> composer require serializer
============================================================================================================
Immutable - значит класс без сеттеров. Все свойства задаются во вреся создания
============================================================================================================
Удалить бд
> bin/console doctrine:schema:drop --full-database --force
============================================================================================================
https://symfony.com/doc/current/security/voters.html

В Symfony по умолчанию 2 Voter'а:
- RoleVoter; (ROLE_..)
- AuthenticatedVoter (IS_AUTHENTICATED_..)
============================================================================================================
############################################################################################################
FORMS
############################################################################################################
============================================================================================================
Установить формы:
> composer require form
============================================================================================================
Если в FormType нет привязки формы к классу, то
$form->getData() будет возвращать ассоциативный массив с данными.
С привязкой будет возвращаться заполненный данными объект, к классу которого есть привязка

In most cases, this is how I use the form system: by binding my forms to a class. But!
I do want you to remember one thing: if you have a super complex form that looks different than your entity,
it's perfectly okay to not use data_class. Sometimes it's simpler to build the form exactly how you want,
call $form->getData() and use that associative array in your controller to update what you need.

Oh, and while we usually see form types bound to an entity class, that's not required!
This class could be any PHP class. So, if you have a form that doesn't match up well with any
of your entities, you can still use data_class. Yep! Create a new model class that has the same properties
as your form, set the data_class to that class, submit the form, get back that model object from the form,
and use it inside your controller to do whatever you want!
============================================================================================================
============================================================================================================
============================================================================================================