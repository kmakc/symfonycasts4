############################################################################################################
BASICS AND FUNDAMENTALS:
############################################################################################################
============================================================================================================
Установка:
> composer create-project symfony/skeleton symfonycasts4
============================================================================================================
Список всех консольных команд:
> php bin/console
============================================================================================================
------------------------------------------------------------------------------------------------------------
Плагины для PhpStorm (# Settings > Plugins):
- Symfony Plugin
- PHP Annotations
- PHP Toolbox
------------------------------------------------------------------------------------------------------------
После установки необходимо включить плагин в PhpStorm:
# Settings > Languages & Frameworks > PHP > Symfony > Enable Plugin for this Project (change need restart)
------------------------------------------------------------------------------------------------------------
Также необходимо указать Path to composer.json:
# Settings > Languages & Frameworks > PHP > Composer
✔ Add packages as libraries
✔ Synchronize IDE Settings with composer.json
------------------------------------------------------------------------------------------------------------
============================================================================================================
Установка аннотаций:
> composer require annotations
============================================================================================================
------------------------------------------------------------------------------------------------------------
Список всех библиотек и их flex псевдонимов:
https://flex.symfony.com/
------------------------------------------------------------------------------------------------------------
Установка security-checker для проверки приложения на уязвимости:
> composer require sec-checker --dev
Проверяем:
> php bin/console security:check
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Установка Twig:
> composer require twig
------------------------------------------------------------------------------------------------------------
Установка asset
> composer require asset
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Twig:
https://twig.symfony.com/doc/2.x/
------------------------------------------------------------------------------------------------------------
Вывод:
{{ title }}, {{ 'mom' == great ? 'hi' : '' }}
Действие (if, for, и т.д.):
{% %}
Комментарий:
{# #}
Наследование шаблона:
{% extends 'base.html.twig' %}
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Профайлер (debug bar):
Установка:
> composer require profiler --dev
------------------------------------------------------------------------------------------------------------
Установка Debug pack
https://github.com/symfony/debug-pack
> composer require debug --dev
------------------------------------------------------------------------------------------------------------
При необходимости тонкой настройки - распаковываем:
> composer unpack debug
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Очистка кеша:
> bin/console cache:clear
rm -rf var/cache/dev/*
> bin/console cache:warmup нужна для первой инициализации кеша при деплое, чтобы он был сразу сформирован
------------------------------------------------------------------------------------------------------------
Логи складываются в var/log
------------------------------------------------------------------------------------------------------------
============================================================================================================
Посмотреть все маршруты приложения:
> bin/console debug:router
============================================================================================================
------------------------------------------------------------------------------------------------------------
Контейнер - это объект, который содержит все сервисы приложения, и иногда значения конфигураций (параметры)
------------------------------------------------------------------------------------------------------------
Список всех уточнений типов для внедрений сервисов (включая собственные сервисы)
> bin/console debug:autowiring --all
------------------------------------------------------------------------------------------------------------
Полный список всех сервисов в контейнере
> bin/console debug:container --show-private
Посмотреть инфу о сервисе по алиасу
> bin/console debug:container monolog.logger
Поиск сервисов, содержащих в названии "log"
> bin/console debug:container --show-private log
Посмотреть список параметров в контейнере
> bin/console debug:container --parameters
------------------------------------------------------------------------------------------------------------
Все в symfony делается с помощью сервисов. symfony - это набор сервисов, конфигов и маршрутов
Бандлы дают новые сервисы.
------------------------------------------------------------------------------------------------------------
Конфигурация бандла (посмотреть пример полного yaml конфига для бандла):
> bin/console config:dump KnpMarkdownBundle
------------------------------------------------------------------------------------------------------------
Посмотреть текущий конфиг бандла:
> bin/console debug:config framework
------------------------------------------------------------------------------------------------------------
~ в yaml файлах значит null
насчет кавычек - не всегда в параметрах они нужны, но если нет уверенности, лучше ставить
============================================================================================================
------------------------------------------------------------------------------------------------------------
Конфиги:
------------------------------------------------------------------------------------------------------------
Как работает конфигурация
Смотрим в Kernel.php configureContainer
Сначала загружаются конфиги из config/packages/*.yaml
Затем, в зависимости от среды, переопределяются и подгружаются файлы из dev/prod/test директорий
В конце подгружаются конфиги сервисов.
Пример: В коммите создан framework.yaml, который переопределяет кеш сервис для dev среды

После подгружаются конфиги из директории config/routes по тому же принципу.
------------------------------------------------------------------------------------------------------------
Интересный факт: не имеет значения, как называются файлы в config/packages, главное - их содержимое.
То есть разделение на файлы нужно для читаемости и удобства переопределения конфигов в зависимости от среды
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
autowiring используется в двух местах:
- автоматическая подстановка параметров методов контроллера
- автоматическая подстановка с уточнением типа в сервисах
------------------------------------------------------------------------------------------------------------
Если сервис public, то его можно получить из контейнера в контроллере так:
$this->get('my_service');
$container->get('my_service');
В Symfony 3 все сервисы public, в Symfony 4 почти все private.
Private удобен тем что заставляет не извлекать сервисы
напрямую из контейнера, а внедрять их в виде зависимости.
Код из-за этого более читабелен и будет быстрее работать. Если надо юзать $this->get('my_service'),
то контроллер должен расширять Controller, а не AbstractController.
------------------------------------------------------------------------------------------------------------
============================================================================================================
------------------------------------------------------------------------------------------------------------
Переменные среды env variables
Список всех env переменных

> bin/console about
 в .env содержится шаблон с возможной конфигурацией. для текущей машины все реальные данные содержатся в .env.local
 (если его нет - нужно создать). Иногда шаблон содержится в .env.dist. Для прояснения, где что нужно прописывать
 можно заглянуть в .gitignore. Указанный там файл будет являться актуальным для текущего окружения
------------------------------------------------------------------------------------------------------------
 # CUSTOM VARS
 MY_TEST_ENV_VAR=testvalue # in yaml config: test: '%env(MY_TEST_ENV_VAR)%'
 Переменные окружения - обычно строки. Но значение может быть булево. Для этого в конфигах можно сделать
 уточнение типа значения '%env(string:MY_TEST_ENV_VAR)%' (int, bool, float и т.д.)
 https://symfony.com/blog/new-in-symfony-3-4-advanced-environment-variables
 ------------------------------------------------------------------------------------------------------------
============================================================================================================
Maker Bundle (генератор кода)
> composer require maker --dev
> bin/console # смотрим новые команды для make
Генерируем новую консольную команду
> bin/console make:command

Консольная команда может включать аргументы и опции (параметры)
> bin/console aricle:stats arg1 arg2 --option1 --opt2=test
> bin/console article:stats --help # man
> bin/console article:stats arg --format=json

============================================================================================================